<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippet Format="1.0.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <Header>
    <Title>Base Repository snippeti</Title>
    <Author>CY</Author>
    <Shortcut>brep</Shortcut>
    <Description>Repository Base modülü</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>NorthwindEntities</Default>
      </Literal>
      <Literal>
        <ID>baseClassName</ID>
        <Default>value</Default>
      </Literal>
      <Literal>
        <ID>singleton</ID>
        <Default>DBTool</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
      <![CDATA[
       
          $name$ db;
          
          public  $baseClassName$() 
          {
              db = $singleton$.DBInstance;
          }
          
          public List<T> GetAll()
          {
             return  db.Set<T>().ToList();
          
          }
          
          public List<T> GetActives()
          {
           return db.Set<T>().Where(x=>x.DataStatus!=DataStatus.Deleted).ToList();
          
          }
           
          public List<T> GetModifieds()
          {
            return db.Set<T>().Where(x=>x.DataStatus==DataStatus.Modified).ToList();
          }
          
          public List<T> GetPassives()
          {
            return db.Set<T>().Where(x=>x.DataStatus==DataStatus.Deleted).ToList();
          }
          
          
          public void Add(T item)
          {
             db.Set<T>().Add(item);
             db.SaveChanges();
          }
          
          public void Delete(T item)
          {
          
              item.DeletedDate= DateTime.Now;
              item.DataStatus = DataStatus.Deleted;
              db.SaveChanges();
          }
          
          public void Destroy(T item)
          {
           db.Set<T>().Remove(item);
           db.SaveChanges();
          }
          
          
          public void Update(T item)
          {
            T toBeUpdated= db.Set<T>().Find(item.ID);
            item.ModifiedDate= DateTime.Now;
            item.DataStatus = DataStatus.Updated;
            db.Entry(toBeUpdated).CurrentValues().SetValues(item);
            db.SaveChanges();
             
          }
      
      
         public List<T> Where(Expression<Func<T,bool>> exp)
         {
         
            return db.Set<T>().Where(exp).ToList();
         }
         
         public T Default(Expression<Func<T,bool>> exp)
         {
           return db.Set<T>().FirstOrDefault(exp);
         }
         
         public bool Any(Expression<Func<T,bool>> exp)
         {
           return db.Set<T>().Any(exp);
         }
         
         public object Select(Expression<Func<T,object>> exp)
         {
           return db.Set<T>().Select(exp).ToList();
         }
         
         public T Find(int id)
         {
          return db.Set<T>().Find(id);
         }
      
      ]]>
    </Code>
  </Snippet>
</CodeSnippet>